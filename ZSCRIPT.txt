version "4.0"

class GungnirHandler : StaticEventHandler
{
	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'BFG9K':
				if (random[gungrand]() <= 96)
				{
					e.Replacement = "GungnirRandom";
				}
				break;
		}
	}

	override void WorldThingSpawned(WorldEvent e)
	{
		let GungnirAmmo = HDBattery(e.Thing);
		if (GungnirAmmo)
		{
			GungnirAmmo.ItemsThatUseThis.Push("HDGungnir");
		}
	}
}

class HDGungnir : HDCellWeapon
{
	enum GungnirFlags
	{
		GNF_Accelerator = 1,
		GNF_Capacitor = 2,
		GNF_Processor = 4,
		GNF_Charger = 8,
	}

	enum GungnirProperties
	{
		GNProp_Flags,
		GNProp_Battery,
		GNProp_Charge,
		GNProp_ChargeType, // 0 = Charge Main, 1 = Charge Reserve
		GNProp_Timer,
		GNProp_LoadType,
		GNProp_ReserveBattery,
	}

	enum GungnirLoadType
	{
		GNLoad_UnloadMain,
		GNLoad_LoadMain,
		GNLoad_LoadMainFromReserve,
		GNLoad_UnloadReserve,
		GNLoad_LoadReserve
	}

	override bool AddSpareWeapon(actor newowner) {return AddSpareWeaponRegular(newowner);}
	override HDWeapon GetSpareWeapon(actor newowner, bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override double GunMass()
	{
		int Extra = 0;
		if (WeaponStatus[GNProp_Battery] >= 0)
		{
			Extra++;
		}
		if (WeaponStatus[GNProp_ReserveBattery] >= 0)
		{
			Extra++;
		}
		if (WeaponStatus[GNProp_Flags] & GNF_Charger)
		{
			Extra++;
		}
		return 11 + Extra;
	}
	override double WeaponBulk() { return 166 + (WeaponStatus[GNProp_Battery] >= 0 ? ENC_BATTERY_LOADED : 0) + (WeaponStatus[GNProp_ReserveBattery] >= 0 ? ENC_BATTERY_LOADED : 0) + (WeaponStatus[GNProp_Flags] & GNF_Charger ? 30 : 0); }
	override string, double GetPickupSprite() { return "GNGRZ0", 0.8; }
	override void InitializeWepStats(bool idfa)
	{
		WeaponStatus[GNProp_Battery] = 20;
		WeaponStatus[GNProp_ReserveBattery] = 20;
		WeaponStatus[GNProp_Charge] = GetMaxCharge();
		WeaponStatus[GNProp_Timer] = 0;
	}
	override void LoadoutConfigure(string input)
	{
		if (GetLoadoutVar(input, "accel", 1) > 0)
		{
			WeaponStatus[GNProp_Flags] |= GNF_Accelerator;
		}
		if (GetLoadoutVar(input, "cap", 1) > 0)
		{
			WeaponStatus[GNProp_Flags] |= GNF_Capacitor;
		}
		if (GetLoadoutVar(input, "proc", 1) > 0)
		{
			WeaponStatus[GNProp_Flags] |= GNF_Processor;
		}
		if (GetLoadoutVar(input, "charger", 1) > 0)
		{
			WeaponStatus[GNProp_Flags] |= GNF_Charger;
		}

		WeaponStatus[GNProp_Battery] = 20;
		WeaponStatus[GNProp_ReserveBattery] = 20;
	}

	override string GetHelpText()
	{
		return WEPHELP_FIRE.."  Shoot\n"
		..WEPHELP_ALTFIRE.."  Charge internal battery\n"
		..(WeaponStatus[GNProp_Flags] & GNF_Charger ? WEPHELP_FIREMODE.."+"..WEPHELP_ALTFIRE.."  Charge reserve battery\n" : "")
		..WEPHELP_RELOAD.."  Abort charge/Reload battery\n"
		..WEPHELP_FIREMODE.."+"..WEPHELP_RELOAD.."  Load reserve battery\n"
		..WEPHELP_UNLOADUNLOAD
		..WEPHELP_FIREMODE.."+"..WEPHELP_UNLOAD.."  Unload reserve battery";
	}

	override string PickupMessage()
	{
		string AccStr = WeaponStatus[GNProp_Flags] & GNF_Accelerator ? "accelerated " : "";
		string CapStr = WeaponStatus[GNProp_Flags] & GNF_Capacitor ? "double-capacity " : "";
		string ProcStr = WeaponStatus[GNProp_Flags] & GNF_Processor ? " with high efficiency processor" : "";
		string ChrgStr = WeaponStatus[GNProp_Flags] & GNF_Charger ? " This model has a battery recharger." : "";
		return String.Format("You got the %s%s'Gungnir' frag beam rifle%s.%s", AccStr, CapStr, ProcStr, ChrgStr);
	}

	protected clearscope int GetMaxCharge()
	{
		return WeaponStatus[GNProp_Flags] & GNF_Capacitor ? 2 : 1;
	}

	protected clearscope int GetBatteryCost()
	{
		return WeaponStatus[GNProp_Flags] & GNF_Processor ? 3 : 5;
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		if (sb.HudLevel == 1)
		{
			sb.DrawBattery(-54, -4, sb.DI_SCREEN_CENTER_BOTTOM, reloadorder: true);
			sb.DrawNum(hpl.CountInv("HDBattery"), -46, -8, sb.DI_SCREEN_CENTER_BOTTOM);
		}

		int ReserveCharge = hdw.WeaponStatus[GNProp_ReserveBattery];
		if (ReserveCharge > 0)
		{
			sb.DrawWepNum(ReserveCharge, 20, posy: -12);
		}
		else if (ReserveCharge == 0)
		{
			sb.DrawString(sb.mAmountFont, "-----", (-16, -16), sb.DI_TEXT_ALIGN_RIGHT | sb.DI_TRANSLATABLE | sb.DI_SCREEN_CENTER_BOTTOM, Font.CR_DARKGRAY);
		}

		int BatteryCharge = hdw.WeaponStatus[GNProp_Battery];
		if (BatteryCharge > 0)
		{
			sb.DrawWepNum(BatteryCharge, 20, posy: -9);
		}
		else if (BatteryCharge == 0)
		{
			sb.DrawString(sb.mAmountFont, "-----", (-16, -13), sb.DI_TEXT_ALIGN_RIGHT | sb.DI_TRANSLATABLE | sb.DI_SCREEN_CENTER_BOTTOM, Font.CR_DARKGRAY);
		}
		sb.DrawWepNum(hdw.WeaponStatus[GNProp_Charge], GetMaxCharge());
	}

	override void DrawSightPicture(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl, bool sightbob, vector2 bob, double fov, bool scopeview, actor hpc, string whichdot)
	{
		int cx, cy, cw, ch;
		[cx, cy, cw, ch] = Screen.GetClipRect();
		sb.SetClipRect(-16 + bob.x, -4 + bob.y, 32, 16, sb.DI_SCREEN_CENTER);
		vector2 bobb = bob * 2;
		bobb.y = clamp(bobb.y, -8, 8);
		sb.DrawImage("FRNTSITE", bobb, sb.DI_SCREEN_CENTER | sb.DI_ITEM_TOP, alpha: 0.9, scale: (1.6, 2));
		sb.SetClipRect(cx, cy, cw, ch);
		sb.DrawImage("BACKSITE", bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_TOP, scale: (1.5, 1));
	}

	Default
	{
		-HDWEAPON.FITSINBACKPACK
		Weapon.SelectionOrder 300;
		Weapon.SlotNumber 7;
		Weapon.SlotPriority 1.5;
		HDWeapon.BarrelSize 35, 1.6, 3;
		Scale 0.5;
		Tag "Gungnir";
		HDWeapon.Refid "gnr";
	}

	States
	{
		Spawn:
			GNGR Z -1;
			Stop;
		Ready:
			GNGR A 1 A_WeaponReady(WRF_ALLOWRELOAD | WRF_ALLOWUSER3 | WRF_ALLOWUSER4);
			Goto ReadyEnd;
		Select0:
			GNGR A 0;
			Goto Select0BFG;
		Deselect0:
			GNGR A 0;
			Goto Deselect0Big;
		User3:
			#### A 0 A_MagManager("HDBattery");
			Goto Ready;
		Fire:
			#### A 0
			{
				invoker.WeaponStatus[GNProp_Timer] = 0;
				if (invoker.WeaponStatus[GNProp_Charge] > 0)
				{
					return ResolveState("Shoot");
				}
				
				return ResolveState("Nope");
			}
			Stop;
		AltFire:
			#### A 0
			{
				if (invoker.WeaponStatus[GNProp_Flags] & GNF_Charger && PressingFireMode())
				{
					if (invoker.WeaponStatus[GNProp_ReserveBattery] < 20 && invoker.WeaponStatus[GNProp_Battery] == 20)
					{ 
						invoker.WeaponStatus[GNProp_ChargeType] = 1;
						return ResolveState("Charge");
					}
				}
				else
				{
					if (invoker.WeaponStatus[GNProp_Charge] < invoker.GetMaxCharge() && invoker.WeaponStatus[GNProp_Battery] >= invoker.GetBatteryCost())
					{ 
						invoker.WeaponStatus[GNProp_ChargeType] = 0;
						return ResolveState("Charge");
					}
				}

				return ResolveState("Nope");
			}
			Stop;
		Shoot:
			#### F 1 Bright Offset(0, 44)
			{
				A_Light0();
				A_StartSound("Gungnir/DeathRayFire", CHAN_WEAPON);
				A_RailAttack(random(500, 800), 0, false, "", "", RGF_NOPIERCING | RGF_NORANDOMPUFFZ | RGF_SILENT, 0, "GungnirRayImpact", 0, 0, 8400, 0, 2.0, 0, "GungnirRaySmoke");
				A_AlertMonsters();
				A_MuzzleClimb(0, 0, -0.2, -0.8, -frandom(0.5, 0.9), -frandom(3.2, 4.0), -frandom(0.5, 0.9), -frandom(3.2, 4.0));
				invoker.WeaponStatus[GNProp_Charge] -= 1;
			}
			#### B 2 Offset(0, 38);
			#### B 1 Offset(0, 32);
			Goto Nope;
		Charge:
			#### B 1;
		ActualCharge:
			#### C 6
			{
				int CType = invoker.WeaponStatus[GNProp_ChargeType];
				if (PressingReload() || CType == 0 && (invoker.WeaponStatus[GNProp_Battery] < invoker.GetBatteryCost() || invoker.WeaponStatus[GNProp_Charge] == invoker.GetMaxCharge()) || CType == 1 && invoker.WeaponStatus[GNProp_ReserveBattery] == 20)
				{
					invoker.WeaponStatus[GNProp_Timer] = 0;
					SetWeaponState("Reload4");
					return;
				}

				if (++invoker.WeaponStatus[GNProp_Timer] > (invoker.WeaponStatus[GNProp_Flags] & GNF_Accelerator ? 10 : 18) / (CType == 1 ? 5 : 1))
				{
					invoker.WeaponStatus[GNProp_Timer] = 0;
					if (CType == 0)
					{
						invoker.WeaponStatus[GNProp_Battery] -= invoker.GetBatteryCost();
						invoker.WeaponStatus[GNProp_Charge]++;
					}
					else
					{
						Console.Printf("kek");
						invoker.WeaponStatus[GNProp_ReserveBattery]++;
					}
				}

				A_WeaponBusy(false);
				A_StartSound("weapons/bfgcharge", 8);
				BFG9k.Spark(self, 1, height - 10);
				A_WeaponReady(WRF_NOFIRE);
			}
			Loop;
		Reload:
			#### A 0
			{
				int LType = PressingFireMode() ? GNLoad_LoadReserve : GNLoad_LoadMain;
				if (LType == GNLoad_LoadReserve && !CheckInventory("HDBattery", 1))
				{
					SetWeaponState("Nope");
					return;
				}
				if (LType == GNLoad_LoadMain)
				{
					if (invoker.WeaponStatus[GNProp_Battery] < invoker.GetBatteryCost() && invoker.WeaponStatus[GNProp_ReserveBattery] >= invoker.GetBatteryCost())
					{
						LType = GNLoad_LoadMainFromReserve;
					}
					else if (!CheckInventory("HDBattery", 1) || invoker.WeaponStatus[GNProp_Battery] == 20)
					{
						SetWeaponState("Nope");
						return;
					}
				}
				invoker.WeaponStatus[GNProp_LoadType] = LType;
			}
			Goto Reload1;
		Unload:
			#### A 0
			{
				int LType = PressingFireMode() ? GNLoad_UnloadReserve : GNLoad_UnloadMain;
				if (LType == GNLoad_UnloadMain && invoker.WeaponStatus[GNProp_Battery] == -1 || LType == GNLoad_UnloadReserve && invoker.WeaponStatus[GNProp_ReserveBattery] == -1)
				{
					SetWeaponState("Nope");
					return;
				}
				invoker.WeaponStatus[GNProp_LoadType] = LType;
			}
			Goto Reload1;
		Reload1:
			#### A 4;
			#### B 2 Offset(0, 36) A_MuzzleClimb(-frandom(1.2, 2.4), frandom(1.2, 2.4));
			#### C 2 Offset(0, 38) A_MuzzleClimb(-frandom(1.2, 2.4), frandom(1.2, 2.4));
			#### C 4 Offset(0, 40)
			{
				A_MuzzleClimb(-frandom(1.2, 2.4), frandom(1.2, 2.4));
				A_StartSound("weapons/bfgclick2", 8);
			}
			#### C 2 Offset(0, 42)
			{
				A_MuzzleClimb(-frandom(1.2, 2.4), frandom(1.2, 2.4));
				A_StartSound("weapons/bfgopen", 8);
				int Which = invoker.WeaponStatus[GNProp_LoadType] < 3 ? GNProp_Battery : GNProp_ReserveBattery;
				if (invoker.WeaponStatus[Which] >= 0)
				{
					if (PressingReload() || PressingUnload())
					{
						HDMagAmmo.GiveMag(self, "HDBattery", invoker.WeaponStatus[Which]);
						A_SetTics(10);
					}
					else
					{
						HDMagAmmo.SpawnMag(self, "HDBattery", invoker.WeaponStatus[Which]);
						A_SetTics(4);
					}
				}
				invoker.WeaponStatus[Which] = -1;
			}
			Goto BatteryOut;
		BatteryOut:
			#### C 4 Offset(0, 42)
			{
				if (invoker.WeaponStatus[GNProp_LoadType] == GNLoad_UnloadMain || invoker.WeaponStatus[GNProp_LoadType] == GNLoad_UnloadReserve)
				{
					SetWeaponState("Reload3");
				}
				else
				{
					A_SetTics(invoker.WeaponStatus[GNProp_LoadType] == GNLoad_LoadMainFromReserve ? 1 : 4);
					A_StartSound("weapons/pocket", 9);
				}
			}
			#### C 12 A_SetTics(invoker.WeaponStatus[GNProp_LoadType] == GNLoad_LoadMainFromReserve ? 4 : 12);
			#### C 12 Offset(0, 42)
			{
				A_SetTics(invoker.WeaponStatus[GNProp_LoadType] == GNLoad_LoadMainFromReserve ? 4 : 12);
				A_StartSound("weapons/bfgbattout", 8);
			}
			#### C 10 Offset(0, 36)
			{
				A_SetTics(invoker.WeaponStatus[GNProp_LoadType] == GNLoad_LoadMainFromReserve ? 3 : 12);
				A_StartSound("weapons/bfgbattpop", 8);
			}
			#### C 0
			{
				if (invoker.WeaponStatus[GNProp_LoadType] == GNLoad_LoadMainFromReserve)
				{
					invoker.WeaponStatus[GNProp_Battery] = invoker.WeaponStatus[GNProp_ReserveBattery];
					invoker.WeaponStatus[GNProp_ReserveBattery] = -1;
				}
				else
				{
					let Battery = HDMagAmmo(FindInventory("HDBattery"));
					if (Battery && Battery.Amount > 0)
					{
						if (invoker.WeaponStatus[GNProp_LoadType] == GNLoad_LoadMain)
						{
							invoker.WeaponStatus[GNProp_Battery] = Battery.TakeMag(true);
						}
						else if (invoker.WeaponStatus[GNProp_LoadType] == GNLoad_LoadReserve)
						{
							invoker.WeaponStatus[GNProp_ReserveBattery] = Battery.TakeMag(false);
						}
					}
					else
					{
						SetWeaponState("Reload3");
						return;
					}
				}
			}
		Reload3:
			#### C 5 Offset(0, 38) A_StartSound("weapons/bfgopen", 8);
			#### C 6 Offset(0, 37) A_StartSound("weapons/bfgclick2", 8);
			#### C 2 Offset(0, 38);
			#### B 2 Offset(0, 36);
			#### A 2 Offset(0, 34);
			#### A 8;
			Goto Ready;
		Reload4:
			#### CBA 2;
			Goto Nope;
	}
}

class GungnirRandom : IdleDummy
{
	States
	{
		Spawn:
			TNT1 A 0 nodelay
			{
				let wpn = HDGungnir(Spawn("HDGungnir", pos, ALLOW_REPLACE));
				if (!wpn)
				{
					return;
				}

				wpn.special = special;
				for (int i = 0; i < 5; ++i)
				{
					wpn.Args[i] = Args[i];
				}
				if (!random(0, 3))
				{
					wpn.WeaponStatus[wpn.GNProp_Flags] |= wpn.GNF_Accelerator;
				}
				if (!random(0, 4))
				{
					wpn.WeaponStatus[wpn.GNProp_Flags] |= wpn.GNF_Capacitor;
				}
				if (!random(0, 3))
				{
					wpn.WeaponStatus[wpn.GNProp_Flags] |= wpn.GNF_Processor;
				}
				if (!random(0, 5))
				{
					wpn.WeaponStatus[wpn.GNProp_Flags] |= wpn.GNF_Charger;
				}
			}
			Stop;
	}
}

class GungnirRayImpact : Actor
{
	Default
	{
		+FORCEDECAL
		+PUFFGETSOWNER
		+ALWAYSPUFF
		+PUFFONACTORS
		+NOINTERACTION
		+BLOODLESSIMPACT
		+FORCERADIUSDMG
		+NOBLOOD
		Decal "GungnirScorch";
		DamageType "Electro";
	}

	States
	{
		Spawn:
			TNT1 A 16 NoDelay
			{
				A_Explode(random(100, 200), 210, XF_HURTSOURCE, false);
				A_StartSound("Gungnir/RayHit", attenuation: 0.5);
				DistantQuaker.Quake(self, 2, 50, 16384, 10, 256, 512, 128);

				// Horizontal ring.
				for (int i = -180; i < 180; i += 4)
				{
					A_SpawnParticle(Color(0x84FF44), SPF_FULLBRIGHT | SPF_RELATIVE, 10, 32, i, 0, 0, 0, 12, 0, 0);
				}
				
				// Ball.
				for (int i = -180; i < 180; i += 6)
				{
					for (int j = -90 + 6; j < 90; j += 6)
					{
						A_SpawnParticle(Color(0xDFFF66), SPF_FULLBRIGHT | SPF_RELATIVE, 15, 16, i, 0, 0, 0, 4 * cos(j) * 1.2, 0, 4 * sin(j));
					}
				}

				// Spears.
				for (int i = 0; i < 10; ++i)
				{
					double pitch = frandom(-85.0, 85.0);
					A_SpawnItemEx("GungnirRayImpactSpear", 0, 0, 0, random(25, 25) * cos(pitch), 0, random(20, 25) * sin(pitch), random(0, 360));
				}
			}
			Stop;
	}
}

class GungnirRaySmoke : Actor
{
	override void PostBeginPlay()
	{
		if (!random(0, 2))
		{
			A_SpawnItemEx("GungnirRaySmokeParticle");
		}

		A_SetRoll(random(0, 360));

		Super.PostBeginPlay();
	}

	Default
	{
		StencilColor "88FF44";
		RenderStyle "Stencil";
		+NOINTERACTION
		+ROLLSPRITE
		Alpha 2.0;
		Scale 0.005;
	}

	States
	{
		Spawn:
			GNSM K 1 Bright
			{
				A_FadeOut(0.035);
				A_SetScale(Scale.X + 0.0001);
				A_ChangeVelocity(frandom(-0.005, 0.005), frandom(-0.005, 0.005), frandom(-0.005, 0.005), CVF_RELATIVE);
			}
			Loop;
	}
}

class GungnirRaySmokeParticle : Actor
{
	override void PostBeginPlay()
	{
		Lifetime = DefaultLifeTime = random(50, 80);
		ParticleSize = frandom(2.0, 4.0);

		Super.PostBeginPlay();
	}

	Default
	{
		+NOINTERACTION
	}

	double Lifetime;
	double DefaultLifeTime;
	double ParticleSize;

	States
	{
		Spawn:
			TNT1 A 1
			{
				A_SpawnParticle("88FF44", SPF_RELATIVE | SPF_FULLBRIGHT, 1, ParticleSize, startalphaf: Lifetime / DefaultLifeTime);
				A_ChangeVelocity(frandom(-0.15, 0.15), frandom(-0.15, 0.15), frandom(-0.15, 0.15), CVF_RELATIVE);
				if (Lifetime-- < 0) Destroy();
			}
			Loop;
	}
}

class GungnirRayImpactSpear : Actor
{
	override void PostBeginPlay()
	{
		ReactionTime = int(ReactionTime * frandom(0.10, 0.5));

		Super.PostBeginPlay();
	}

	Default
	{
		+NOINTERACTION
		Gravity 0.6;
		ReactionTime 35;
	}

	States
	{
		Spawn:
			TNT1 A 1
			{
				if (!level.IsPointInLevel(pos)) Destroy();

				vel *= 0.95;
				vel.z -= 1.0 * Gravity;

				A_SpawnItemEx("GungnirRaySpearSmoke");
				A_CountDown();
			}
			Loop;
	}
}

class GungnirRaySpearSmoke : Actor
{
	override void PostBeginPlay()
	{
		A_SetRoll(random(0, 360));

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		vel *= 0.88;

		Super.Tick();
	}

	Default
	{
		Scale 0.02;
		RenderStyle "Shaded";
		StencilColor "B0FF55";
		+BRIGHT
		+NOINTERACTION
		+ROLLSPRITE
		+FORCEXYBILLBOARD
	}

	States
	{
		Spawn:
			GNSM K 1
			{
				A_FadeOut(0.03);
				A_SetScale(Scale.X + 0.003);
			}
			Loop;
	}
}